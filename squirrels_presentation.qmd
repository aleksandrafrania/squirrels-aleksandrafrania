---
title: "The Central Park Squirrel Census"
author: "Aleksandra Frania | MADS"
date: "`r Sys.Date()`"
format: revealjs
editor: visual
smaller: true
---

## About the data set

-   Data collected for the 2018 Squirrel Census project in NYC

-   3,023 unique squirrel sightings throughout October 2018

-   31 columns including squirrel location, fur color, reaction to humans, etc.

    ![](NYCSC.png)

## Not much to summarize, but...

... about the above ground sighter measurement

```{r}
squirrels <- read.csv("data/squirrel_data.csv", na.strings = c("", "NA"))
```

```{r}
# Since almost none of the data is numerical, it is difficult to make an interesting summarizing table. For one, it does not make any sense to display quantiles and extrema of geographical coordinates. 
# One can count the occurrence of unique values, but this can be just as well visualized in a bar plot, for instance (included later in the presentation).

# The column Above.Gound.Sighter.Measurment may be interesting to summarise, let us clean it up a bit:

# Replacing all FALSE values with 0 (FALSE means that squirrel was seen from the ground, in other words, the sighter was at height 0)
squirrels$Above.Ground.Sighter.Measurement[squirrels$Above.Ground.Sighter.Measurement == FALSE] <- 0

# The most common value for this column is 0 so we will replace all missing values with 0, since there are only 114 NAs
squirrels$Above.Ground.Sighter.Measurement[is.na(squirrels$Above.Ground.Sighter.Measurement)] <- 0

# The entries are of type "character" so we will change the type to "integer"
squirrels$Above.Ground.Sighter.Measurement <- as.integer(squirrels$Above.Ground.Sighter.Measurement)

library(dplyr)

squirrels |> 
  summarise(min = min(Above.Ground.Sighter.Measurement),
            max = max(Above.Ground.Sighter.Measurement),
            q25 = quantile(Above.Ground.Sighter.Measurement, 0.25),
            median = median(Above.Ground.Sighter.Measurement),
            q75 = quantile(Above.Ground.Sighter.Measurement, 0.75),
            mean = mean(Above.Ground.Sighter.Measurement),
            sd = sd(Above.Ground.Sighter.Measurement))
```

Most values are 0 and the maximum is very high, let's see how values different from 0 behave, also excluding the worst outliers:

```{r}
library(ggplot2)

ggplot(squirrels[squirrels$Above.Ground.Sighter.Measurement != 0 & squirrels$Above.Ground.Sighter.Measurement <= 50, ], 
       aes(x = Above.Ground.Sighter.Measurement)) +
  geom_histogram(binwidth = 1, fill = "skyblue", color = "black", alpha = 0.7) +
  labs(title = "Histogram of squirrel sighters' positions above ground",
       x = "Sighter position in meters (height)",
       y = "Frequency") +
  theme_minimal()
```

## All sightings on one map

```{r}
library(pacman)
library(ggmap)
library(osmdata)
library(ggspatial)

#Create a stadia terrain (osm) map
register_stadiamaps("67db8286-2337-4988-b5a0-1a5e1adbeba4", write = FALSE)

borders <- c(bottom = 40.762, top = 40.8025, left = -74, right = -73.93)
map <- get_stadiamap(borders, zoom = 15, maptype = "stamen_terrain")

ggmap(map) +
  geom_point(data = squirrels, 
             aes(x = X, y = Y), 
             size = 0.3) +
  labs(title = "Squirrels sightings in Central Park, October 2018", 
       x = "Longitude", 
       y = "Latitude") +
  annotation_north_arrow(location = "br", which_north = "true")
```

## Sightings throughout the month

The sightings took place on only 11 out of 31 days

```{r}
# Cleaning up the date format
squirrels$Date <- as.Date(as.character(squirrels$Date), format = "%m%d%Y")
```

```{r}
# I managed to deploy my app and wanted to include a link in the presentation but did not succeed, hence this code needs to be run to use the app.

library(shiny)
library(rsconnect)

all_dates <- seq(as.Date("2018-10-01"), as.Date("2018-10-31"), by = "days")

squirrels <- squirrels[order(squirrels$Date), ]
unique_dates <- unique(squirrels$Date)

# Combine unique dates in the data set with the missing dates to cover the entire month
all_unique_dates <- sort(unique(c(unique_dates, all_dates)))

start_date <- as.Date("2018-10-01")
end_date <- as.Date("2018-10-31")

rsconnect::setAccountInfo(name='aleksandrafrania', token='EA9898BC78B663D5734437D56A0E8FCF', secret='JQHalI+zM16226QEvEjTyOWzu1rEaXfS7C/KfoSB')

ui <- fluidPage(
  sliderInput("day", "Select Day", min = 1, max = length(all_unique_dates), value = 1, step = 1),
  plotOutput("mapPlot")
)

server <- function(input, output, session) {
  output$mapPlot <- renderPlot({
    # Create a map for the selected day
    map <- get_stadiamap(borders, zoom = 14, maptype = "stamen_terrain")
    
    subset_data <- squirrels[squirrels$Date == all_unique_dates[input$day], ]
    
    ggmap(map) +
      geom_point(data = subset_data,
                 aes(x = X, y = Y), 
                 size = 0.1) +
      labs(x = NULL,
           y = NULL,
           title = paste("Date:", format(subset_data$Date, "%Y-%m-%d")), 
           subtitle = paste("Sightings:", nrow(subset_data)))
  })
}

shinyApp(ui, server)
```

## Sightings during the first 3 weeks of October 2018

```{r}
# Split October 2018 into weeks, only taking the first 3 weeks (last sighting occurs on October 20th so plotting past that date is useless)
week1 <- squirrels[squirrels$Date >= "2018-10-01" & squirrels$Date <= "2018-10-07", ]
week2 <- squirrels[squirrels$Date >= "2018-10-08" & squirrels$Date <= "2018-10-14", ]
week3 <- squirrels[squirrels$Date >= "2018-10-15" & squirrels$Date <= "2018-10-21", ]
```

```{r}
library(gridExtra)

# Define the date ranges
date_ranges <- c("2018-10-01" , "2018-10-07", "2018-10-08", "2018-10-14",
                  "2018-10-15" , "2018-10-21")

# Create a 1x3 grid of maps for each date range
new_borders <- c(bottom = 40.762, top = 40.8025, left = -73.99, right = -73.94)
maps <- lapply(seq(1, length(date_ranges), by = 2), function(i) {
  map <- get_stadiamap(new_borders, zoom = 14, maptype = "stamen_terrain")
  
  subset_data <- squirrels[squirrels$Date >= date_ranges[i] & squirrels$Date <= date_ranges[i+1], ]
  
  ggmap(map) +
    geom_point(data = subset_data,
               aes(x = X, y = Y), 
               size = 0.1) +
    labs(x = NULL,
         y = NULL,
         title = paste("Week", (i+1)/2), 
         subtitle = paste("Sightings:", nrow(subset_data)))
})

# Combine maps into one big plot
grid.arrange(grobs = maps, ncol = 3, widths = c(0.1, 0.1, 0.1))
```

It looks like week 2 was the busiest!

## Week vs Weekend

```{r}
# Split October 2018 into weekdays and weekends, only taking the first 3 weeks
weeknoend1 <- squirrels[squirrels$Date >= "2018-10-01" & squirrels$Date <= "2018-10-05", ]
weekend1 <- squirrels[squirrels$Date >= "2018-10-06" & squirrels$Date <= "2018-10-07", ]
weeknoend2 <- squirrels[squirrels$Date >= "2018-10-08" & squirrels$Date <= "2018-10-12", ]
weekend2 <- squirrels[squirrels$Date >= "2018-10-13" & squirrels$Date <= "2018-10-14", ]
weeknoend3 <- squirrels[squirrels$Date >= "2018-10-15" & squirrels$Date <= "2018-10-19", ]
weekend3 <- squirrels[squirrels$Date >= "2018-10-20" & squirrels$Date <= "2018-10-21", ]
```

```{r}
library(gridExtra)

# Define the date ranges for weekdays (weeknoend) and weekends (weekend)
date_ranges_weeknoend <- c("2018-10-01", "2018-10-05", "2018-10-08", "2018-10-12", "2018-10-15", "2018-10-19")
date_ranges_weekend <- c("2018-10-06", "2018-10-07", "2018-10-13", "2018-10-14", "2018-10-20", "2018-10-21")

# Create a 2x3 grid of maps for weekdays and weekends
maps_weekdays <- lapply(seq(1, length(date_ranges_weeknoend), by = 2), function(i) {
  map <- get_stadiamap(new_borders, zoom = 14, maptype = "stamen_terrain")
  
  subset_data <- squirrels[squirrels$Date >= date_ranges_weeknoend[i] & squirrels$Date <= date_ranges_weeknoend[i+1], ]
  
  ggmap(map) +
    geom_point(data = subset_data,
               aes(x = X, y = Y), 
               size = 0.05) +
    labs(x = NULL,
         y = NULL,
         title = paste("Week", (i+1)/2), 
         subtitle = paste("Sightings:", nrow(subset_data)))
})

maps_weekends <- lapply(seq(1, length(date_ranges_weekend), by = 2), function(i) {
  map <- get_stadiamap(new_borders, zoom = 14, maptype = "stamen_terrain")
  
  subset_data <- squirrels[squirrels$Date >= date_ranges_weekend[i] & squirrels$Date <= date_ranges_weekend[i+1], ]
  
  ggmap(map) +
    geom_point(data = subset_data,
               aes(x = X, y = Y), 
               size = 0.05) +
    labs(x = NULL,
         y = NULL,
         title = paste("Weekend", (i+1)/2), 
         subtitle = paste("Sightings:", nrow(subset_data))) +
    guides(subtitle = guide_legend(title.vjust = 0.5, 
                                   title.theme = element_text(size = 10, face = "bold")))
})

# Combine maps into one big 2x3 grid
grid.arrange(grobs = c(maps_weekdays, maps_weekends), ncol = 3, nrow = 2)

```

## Hectare sightings

The entire Central Park as a rectangle can be divided into squares, 42 in length and 9 in width. Let's inspect the sightings under the form of a heatmap:

```{r}
# Splitting the hectare names into 2-digit number and letter
squirrels$XX <- as.numeric(substr(squirrels$Hectare, 1, nchar(squirrels$Hectare) - 1))
squirrels$Y <- substr(squirrels$Hectare, nchar(squirrels$Hectare), nchar(squirrels$Hectare))

# Ordering the letters so that the y-axis has an alphabetical order going down
squirrels$Y <- factor(squirrels$Y, levels = rev(levels(factor(squirrels$Y))))

# Grouping the squirrels by both hectare name parts and counting the occurrences
squirrels_aggregated <- squirrels |> 
  group_by(XX, Y) |> 
  summarize(Squirrel_Count = sum(Hectare.Squirrel.Number), 
            .groups = 'drop')

max_count <- max(squirrels_aggregated$Squirrel_Count)
breaks <- seq(0, max_count, length.out = 11)

ggplot(squirrels_aggregated, 
       aes(x = XX, 
           y = Y)) +
  geom_tile(aes(fill = Squirrel_Count), 
            color = "white") +
  scale_fill_viridis_c(option = "plasma", 
                       breaks = breaks, 
                       labels = round(breaks)) +
  labs(title = "Squirrel occurrences per hectare",
       x = NULL,
       y = NULL,
       fill = "Squirrel count") +
  theme_minimal() +
  coord_fixed()
```

It looks like the squirrels enjoy The Ramble (most forest-like part of the park).

## AM vs PM

maybe compare the weeks & weekends, will see

## Fur colors bar plot

plot

## Fur colors all on 1 map

plot

## Fur colors on 3 separate maps

maps

## If time allows, some other results

## Squirrels vs Humans

```{r, echo = FALSE}
# echo doesn't work, need to find a way to remove this chunk from the slides

library(dplyr)
library(tidyr)

squirrels |> 
  summarise(Approaches_true = sum(Approaches == "true")*100/3023,
            Approaches_false = sum(Approaches == "false")*100/3023,
            Runs.from_true = sum(Runs.from == "true")*100/3023,
            Runs.from_false = sum(Runs.from == "false")*100/3023,
            Indifferent_true = sum(Indifferent == "true")*100/3023,
            Indifferent_false = sum(Indifferent == "false")*100/3023) |> 
  pivot_longer(cols = everything(),
               names_to = c(".value", "Condition"),
               names_sep = "_")
```

```{r}
library(DiagrammeR)

DiagrammeR("graph TB;
    A(Squirrel meets Human)-->B(Squirrel approaches);
    A-->C(Squirrel runs away);
    A-->D(Squirrel is indifferent);
    B-->E(Yes<br><br>5.89%);
    B-->F(No<br><br>94.11%);
    C-->G(Yes<br><br>22.43%);
    C-->H(No<br><br>77.57%);
    D-->I(Yes<br><br>48.10%);
    D-->J(No<br><br>51.90%);")

```
